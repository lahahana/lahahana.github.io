<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Java Stream 并行流随笔]]></title>
      <url>%2F2017%2F04%2F19%2Fjava-stream-issue%2F</url>
      <content type="text"><![CDATA[Java Stream 是 JDK1.8 才引入的特性，最近在使用Java Stream时遇到了一些坑，在项目的代码中用到了Stream API的parallelStream， 在并行流中进行了IO操作，然而由于IO操作花费的时间比较多，让后续其余的的并行流处理操作也hung住了，给我的感觉就是整个java进程都hung住了。在深究之后发现, 所有并行流中发生的操作都会交由ForkJoinPool,common()的forkjoinpool来执行， 而这个fork join pool是整个jvm全局共享的， 由于fork/join的特点，如果在并行流中有阻塞任务长时间存在，则会对其余线程产生副作用，对性能有很大影响。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring Cloud 使用随笔]]></title>
      <url>%2F2017%2F04%2F19%2Fspring-cloud-demo%2F</url>
      <content type="text"><![CDATA[最近Spring Cloud正在大力推广， 自己也参加了在上海的Spring Cloud线下沙龙，多了一些对Spring Cloud技术栈在实际项目中的运用经验。于是自己搭建了一个Spring Cloud的demo。Eureka： 服务注册与发现Ribbon: 用作Load BalanceZuul： 作为网关路由，反向代理，可在这层结合Ribbon进行负载均衡，鉴权、流控、审计等流程可以在zuul这一层实现 spirg cloud中一些特殊的自定义配置我也在项目的配置文件中进行了配置。 关于Zuul的性能问题, zuul在性能方面确实和Nginx有一定的差距，到目前为止，这一点不可否认。 github地址：https://github.com/lahahana/spring-cloud-demo 借此机会向读者推荐携程开源的基于Spring Cloud 的配置中心Apollo,携程框架部门研发的配置管理平台，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性.github:https://github.com/ctripcorp/apollo]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Eclipse 翻译插件]]></title>
      <url>%2F2017%2F04%2F13%2Feclipse-plugin%2F</url>
      <content type="text"><![CDATA[自己写的eclipse翻译插件，支持多种语言，将jar包拷贝到eclipse dropins目录下，重启即可。操作步骤：选中文本， 按快捷键 Ctrl + 1。 插件下载地址：https://github.com/lahahana/eclipse_translater/releases/tag/1.0]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hibernate 5.0.10.Final 与 Derby 使用搭配使用时的bug]]></title>
      <url>%2F2017%2F04%2F12%2Fhibernate-derby-bug%2F</url>
      <content type="text"><![CDATA[最近在Hibernate 5.0.10.Final 与 Derby 10.13.1.1 搭配使用时，Hibernate 抛出 “Derby does not support sequence prior to release 10.6.1.0”异常 后来经过研究发现，这是Hibernate的bug，遂将Hibernate版本升至目前最新版本5.2.9.Final，即可解决问题。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于注解的java csv 序列化工具]]></title>
      <url>%2F2017%2F04%2F11%2Fannotation-based-csv-serialize-tool%2F</url>
      <content type="text"><![CDATA[因为最近要做一个生成各种CSV文件的工程，于是就实现了这个根据Java Class Field进行CSV序列化的工具，基于注解的形式，只需要在相关类上添加注解，就可以实现自定义的CSV序列化方案github 地址：https://github.com/lahahana/csvjar已经推到maven 中央仓库maven pom配置： &lt;dependency&gt; &lt;groupId&gt;com.github.lahahana&lt;/groupId&gt; &lt;artifactId&gt;csv&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;/dependency&gt;通过调用CsvSerializer.serialize()来进行CSV序列化 相关注解： @CsvIgnore :此注解为标识性注解，@Target({ElementType.FIELD}), 表示该字段在序列化时会被忽略 @CsvIgnoreProperties：此注解@Target({ElementType.TYPE})，在类级别指定当前类所拥有字段的哪些在序列化时忽略 @CsvProperty：此注解@Target({ElementType.TYPE})，通过指定此注解的header，order,分别可以实现在序列化时指定指定的字段的csv header的值，字段的序列化顺序。最终要的一个属性是converter，如果需要对特定字段在序列化时进行一些数据转换的操作，可以通过继承com.alpha.csv.convertor.Converter接口,实现自定义的Converter。 Demo： @CsvIgnoreProperties({&quot;country&quot;}) public class Address { private String country = &quot;CN&quot;; @CsvIgnore public String state = &quot;ZJ&quot;; private String city = &quot;Hangzhou&quot;; } public class Person { @CsvProperty(header=&quot;Name&quot;, order=1) private String name = &quot;Lahahana&quot;; @CsvProperty(header=&quot;ID&quot;, order=0) private int id = 10001; @CsvProperty(header = &quot;Birthday&quot;, order=2, converter = TimeToDateConvertor.class) public long birthday= System.currentTimeMillis(); private Address address = new Address(); public static void main(String []args) throws CsvException, IOException { List list = new ArrayList(); Person p = new Person(); for(int i=0;i&lt;10;i++) list.add(p); String info = CsvSerializer.serialize(list, Person.class); System.out.println(info); } } Result: ID,Name,Birthday,city 10001,Lahahana,Tue Mar 28 21:14:59 GMT+08:00 2017,Hangzhou 10001,Lahahana,Tue Mar 28 21:14:59 GMT+08:00 2017,Hangzhou]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySql5.7.11 解压缩版安装以及配置]]></title>
      <url>%2F2017%2F04%2F08%2Fmysql-config%2F</url>
      <content type="text"><![CDATA[将mysql压缩包解压后，依次执行如下命令:将mysql注册到系统服务：1mysqld --install MySQL 启动mysql服务：1net start MySQL mysql5.7 之后会自动生成root用户的随机密码，在data文件夹下的${hostname}.err日志文件中：1[Note] A temporary password is generated for root@localhost: m7B/rGDOuuhb 以admin身份登陆mysql1mysqladmin -u root password &quot;temporary password&quot;; 更改root密码1set password for root@localhost = password(&apos;password&apos;); 添加用户并授权1GRANT all privileges ON *.* TO &apos;test&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;test&apos; 查看用户授权1show grants for &apos;test&apos;@&apos;localhost&apos; 支持中文,设置mysql编码为utf-8在mysql根目录新建my.ini,复制以下内容并重启mysql1234567891011[mysqld]character-set-server=utf8 collation-server=utf8_general_ci [mysql]default-character-set = utf8[mysql.server]default-character-set = utf8[mysqld_safe]default-character-set = utf8[client]default-character-set = utf8]]></content>
    </entry>

    
  
  
</search>
